# -*- coding: utf-8 -*-
"""Task 2 Credit Card Fraud Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pwfiMCN_FBJ_wF8lvsW4fByPRJgf4kHZ
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

#load the dataset of credit card
credit_card = pd.read_csv('/content/creditcard.csv')

# first 10 rows of credit card data
credit_card.head()

credit_card.tail()

#information
credit_card.info()

#finding the missing values
credit_card.isnull().sum()

#distribution of Transaction and fraudulent Transaction
credit_card['Class'].value_counts()



"""0 is equal to "Normal Transaction" &
1 is equal to "Fraud Transaction"

"""

#separate the data
legal = credit_card[credit_card.Class == 0]
fraud = credit_card[credit_card.Class==1]

print(legal)
print(fraud)

# measurement of statiscal data
legal.Amount.describe()

fraud.Amount.describe()

#comparing the both transaction values
credit_card.groupby('Class').mean()

"""Building a dataset of similar distribution of legal transaction and fraud transaction

total fraud detection is = 492
"""

legal_sample = legal.sample(n=492)

new_data=pd.concat([legal_sample,fraud],axis=0)

new_data.head()

new_data.tail()

new_data.groupby('Class').mean()

"""Now simpling the Data into features & targets"""

i = new_data.drop(columns='Class',axis=1)
j = new_data['Class']

print(i)

print(j)

"""now split the data into training and testing data"""

i_train , i_test , j_train , j_test = train_test_split(i , j , test_size=0.2 , random_state=2)

print(i.shape, i_train.shape , i_test.shape)



"""Model Training ANd regression of logic"""

model_data = LogisticRegression()

#now train the logisticRegression with model_data
model_data.fit(i_train, j_train)

"""Accuracy Score

"""

#Accuracy Score on training data
i_train_predic = model_data.predict(i_train)
training_data = accuracy_score(i_train_predic, j_train)

print("The training data on accuracy :" , training_data)

# accuracy score on testing data
i_test_predic = model_data.predict(i_test)
testing_data = accuracy_score(i_test_predic, j_test)

print("Accuracy score on testing Data : " , testing_data)

